const { Telegraf, Markup } = require("telegraf");
const sqlite3 = require("sqlite3").verbose();
const path = require("path");

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
require("dotenv").config();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, "cashback.db");
const db = new sqlite3.Database(dbPath);

// –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
const BANKS = ["–¢-–ë–∞–Ω–∫", "–í–¢–ë", "–Ø–Ω–¥–µ–∫—Å", "–û–∑–æ–Ω –ë–∞–Ω–∫"];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS cashback (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        bank TEXT NOT NULL,
        category TEXT NOT NULL,
        percentage REAL NOT NULL,
        UNIQUE(bank, category)
    )`);
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu() {
  return Markup.keyboard([
    ["üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–æ–º"],
    ["üîç –£–∑–Ω–∞—Ç—å –∫–µ—à–±—ç–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"],
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–æ–º
function getCashbackManagementMenu() {
  return Markup.keyboard([
    ["üí≥ –¢-–ë–∞–Ω–∫", "üí≥ –í–¢–ë"],
    ["üí≥ –Ø–Ω–¥–µ–∫—Å", "üí≥ –û–∑–æ–Ω –ë–∞–Ω–∫"],
    ["üîô –ù–∞–∑–∞–¥"],
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–Ω–∫–æ–º
function getBankActionsMenu() {
  return Markup.keyboard([
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
    ["üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"],
    ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
    ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
    ["üîô –ù–∞–∑–∞–¥"],
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
function getBackButton() {
  return Markup.keyboard([["üîô –ù–∞–∑–∞–¥"]]).resize();
}

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.start((ctx) => {
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–æ–º! üí≥\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    getMainMenu()
  );
  delete userStates[ctx.from.id];
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–æ–º", (ctx) => {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–æ–º:",
    getCashbackManagementMenu()
  );
  userStates[ctx.from.id] = { state: "selecting_bank_for_management" };
});

bot.hears("üîç –£–∑–Ω–∞—Ç—å –∫–µ—à–±—ç–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", (ctx) => {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
  db.all(
    "SELECT DISTINCT category FROM cashback ORDER BY category",
    (err, rows) => {
      if (err) {
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.");
        return;
      }

      if (rows.length === 0) {
        ctx.reply(
          '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–æ–º".'
        );
        return;
      }

      const categories = rows.map((row) => row.category);
      const keyboard = [];

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
      for (let i = 0; i < categories.length; i += 2) {
        const row = categories.slice(i, i + 2);
        keyboard.push(row);
      }
      keyboard.push(["üîô –ù–∞–∑–∞–¥"]);

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ—à–±—ç–∫–∞:",
        Markup.keyboard(keyboard).resize()
      );
      userStates[ctx.from.id] = { state: "selecting_category_for_view" };
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
BANKS.forEach((bank) => {
  bot.hears(`üí≥ ${bank}`, (ctx) => {
    if (userStates[ctx.from.id]?.state === "selecting_bank_for_management") {
      ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${bank}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
        getBankActionsMenu()
      );
      userStates[ctx.from.id] = { state: "bank_selected", bank: bank };
    }
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", (ctx) => {
  const userState = userStates[ctx.from.id];
  if (userState?.state === "bank_selected") {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", getBackButton());
    userStates[ctx.from.id] = { ...userState, state: "entering_category_name" };
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–∞–Ω–∫–∞
bot.hears("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", (ctx) => {
  const userState = userStates[ctx.from.id];
  if (userState?.state === "bank_selected") {
    db.all(
      "SELECT category, percentage FROM cashback WHERE bank = ? ORDER BY category",
      [userState.bank],
      (err, rows) => {
        if (err) {
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
          return;
        }

        if (rows.length === 0) {
          ctx.reply(
            `–í –±–∞–Ω–∫–µ ${userState.bank} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`
          );
          return;
        }

        let message = `üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ${userState.bank}:\n\n`;
        rows.forEach((row) => {
          message += `‚Ä¢ ${row.category}: ${row.percentage}%\n`;
        });

        ctx.reply(message);
      }
    );
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", (ctx) => {
  const userState = userStates[ctx.from.id];
  if (userState?.state === "bank_selected") {
    db.all(
      "SELECT category FROM cashback WHERE bank = ? ORDER BY category",
      [userState.bank],
      (err, rows) => {
        if (err) {
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
          return;
        }

        if (rows.length === 0) {
          ctx.reply(
            `–í –±–∞–Ω–∫–µ ${userState.bank} –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.`
          );
          return;
        }

        const categories = rows.map((row) => row.category);
        const keyboard = [];

        for (let i = 0; i < categories.length; i += 2) {
          const row = categories.slice(i, i + 2);
          keyboard.push(row);
        }
        keyboard.push(["üîô –ù–∞–∑–∞–¥"]);

        ctx.reply(
          "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
          Markup.keyboard(keyboard).resize()
        );
        userStates[ctx.from.id] = {
          ...userState,
          state: "selecting_category_to_edit",
        };
      }
    );
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.hears("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", (ctx) => {
  const userState = userStates[ctx.from.id];
  if (userState?.state === "bank_selected") {
    db.all(
      "SELECT category FROM cashback WHERE bank = ? ORDER BY category",
      [userState.bank],
      (err, rows) => {
        if (err) {
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
          return;
        }

        if (rows.length === 0) {
          ctx.reply(
            `–í –±–∞–Ω–∫–µ ${userState.bank} –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`
          );
          return;
        }

        const categories = rows.map((row) => row.category);
        const keyboard = [];

        for (let i = 0; i < categories.length; i += 2) {
          const row = categories.slice(i, i + 2);
          keyboard.push(row);
        }
        keyboard.push(["üîô –ù–∞–∑–∞–¥"]);

        ctx.reply(
          "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
          Markup.keyboard(keyboard).resize()
        );
        userStates[ctx.from.id] = {
          ...userState,
          state: "selecting_category_to_delete",
        };
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.hears("üîô –ù–∞–∑–∞–¥", (ctx) => {
  const userState = userStates[ctx.from.id];

  if (!userState) {
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getMainMenu());
    return;
  }

  switch (userState.state) {
    case "selecting_bank_for_management":
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getMainMenu());
      delete userStates[ctx.from.id];
      break;

    case "bank_selected":
    case "selecting_category_to_edit":
    case "selecting_category_to_delete":
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–æ–º:",
        getCashbackManagementMenu()
      );
      userStates[ctx.from.id] = { state: "selecting_bank_for_management" };
      break;

    case "entering_category_name":
    case "entering_percentage":
    case "entering_new_percentage":
      ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${userState.bank}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
        getBankActionsMenu()
      );
      userStates[ctx.from.id] = {
        state: "bank_selected",
        bank: userState.bank,
      };
      break;

    case "selecting_category_for_view":
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getMainMenu());
      delete userStates[ctx.from.id];
      break;

    default:
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getMainMenu());
      delete userStates[ctx.from.id];
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", (ctx) => {
  const userState = userStates[ctx.from.id];
  const text = ctx.message.text;

  if (!userState) return;

  switch (userState.state) {
    case "entering_category_name":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      ctx.reply(
        `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${text}" –≤ –±–∞–Ω–∫–µ ${userState.bank}:`,
        getBackButton()
      );
      userStates[ctx.from.id] = {
        ...userState,
        state: "entering_percentage",
        category: text,
      };
      break;

    case "entering_percentage":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      const percentage = parseFloat(text);
      if (isNaN(percentage) || percentage < 0 || percentage > 100) {
        ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):",
          getBackButton()
        );
        return;
      }

      db.run(
        "INSERT OR REPLACE INTO cashback (bank, category, percentage) VALUES (?, ?, ?)",
        [userState.bank, userState.category, percentage],
        (err) => {
          if (err) {
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
            return;
          }

          ctx.reply(
            `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${userState.category}" —Å –∫–µ—à–±—ç–∫–æ–º ${percentage}% –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ${userState.bank}!`
          );
          ctx.reply(
            `–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å ${userState.bank}?`,
            getBankActionsMenu()
          );
          userStates[ctx.from.id] = {
            state: "bank_selected",
            bank: userState.bank,
          };
        }
      );
      break;

    case "selecting_category_to_edit":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      db.get(
        "SELECT percentage FROM cashback WHERE bank = ? AND category = ?",
        [userState.bank, text],
        (err, row) => {
          if (err || !row) {
            ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
          }

          ctx.reply(
            `–¢–µ–∫—É—â–∏–π –∫–µ—à–±—ç–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${text}": ${row.percentage}%\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:`,
            getBackButton()
          );
          userStates[ctx.from.id] = {
            ...userState,
            state: "entering_new_percentage",
            category: text,
          };
        }
      );
      break;

    case "entering_new_percentage":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      const newPercentage = parseFloat(text);
      if (isNaN(newPercentage) || newPercentage < 0 || newPercentage > 100) {
        ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100):",
          getBackButton()
        );
        return;
      }

      db.run(
        "UPDATE cashback SET percentage = ? WHERE bank = ? AND category = ?",
        [newPercentage, userState.bank, userState.category],
        (err) => {
          if (err) {
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
            return;
          }

          ctx.reply(
            `‚úÖ –ö–µ—à–±—ç–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${userState.category}" –≤ ${userState.bank} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newPercentage}%!`
          );
          ctx.reply(
            `–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å ${userState.bank}?`,
            getBankActionsMenu()
          );
          userStates[ctx.from.id] = {
            state: "bank_selected",
            bank: userState.bank,
          };
        }
      );
      break;

    case "selecting_category_to_delete":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      db.run(
        "DELETE FROM cashback WHERE bank = ? AND category = ?",
        [userState.bank, text],
        (err) => {
          if (err) {
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
            return;
          }

          ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${text}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ ${userState.bank}!`);
          ctx.reply(
            `–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å ${userState.bank}?`,
            getBankActionsMenu()
          );
          userStates[ctx.from.id] = {
            state: "bank_selected",
            bank: userState.bank,
          };
        }
      );
      break;

    case "selecting_category_for_view":
      if (text === "üîô –ù–∞–∑–∞–¥") return;

      db.all(
        "SELECT bank, percentage FROM cashback WHERE category = ? ORDER BY percentage DESC",
        [text],
        (err, rows) => {
          if (err) {
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
            return;
          }

          if (rows.length === 0) {
            ctx.reply(
              `–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${text}" –∫–µ—à–±—ç–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –±–∞–Ω–∫–µ.`
            );
            return;
          }

          let message = `üí≥ –ö–µ—à–±—ç–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${text}":\n\n`;
          rows.forEach((row, index) => {
            const emoji =
              index === 0
                ? "ü•á"
                : index === 1
                ? "ü•à"
                : index === 2
                ? "ü•â"
                : "‚Ä¢";
            message += `${emoji} ${row.bank}: ${row.percentage}%\n`;
          });

          ctx.reply(message);
        }
      );
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
  ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// Graceful shutdown
process.once("SIGINT", () => {
  bot.stop("SIGINT");
  db.close();
});
process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  db.close();
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
